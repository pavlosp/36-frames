Features


Works everywhere, parses anything you throw at it.

🏎️ Fastest EXIF lib: +-1ms per file
🗃️ Any input: buffers, url, <img> tag, and more
📷 Files: .jpg, .tif, .png, .heic, .avif, .iiq
🔎 Segments: TIFF (EXIF, GPS, etc...), XMP, ICC, IPTC, JFIF, IHDR
📑 Reads only first few bytes
🔬 Skips parsing tags you don't need
✨ Isomorphic: Browser & Node.js
🗜️ No dependencies
🖼️ Extracts thumbnail
💔 Salvages broken files
🧩 Modular
📚 Customizable tag dictionaries
📦 Bundled as UMD/CJS or ESM
✔ Tested and benchmarked
🤙 Promises
🕸 Supports even IE11 IE10
and more (click to expand)
You don't need to read the whole file to tell if there's EXIF in it. And you don't need to extract all the data when you're looking for just a few tags. Exifr just jumps through the file structure, from pointer to pointer. Instead of reading it byte by byte, from beginning to end.

Exifr does what no other JS lib does. It's efficient and blazing fast!

Segments	JPEG	TIFF / IIQ	HEIF (HEIC, AVIF)	PNG
EXIF/TIFF, GPS	✔	✔	✔	✔
XMP	✔	✔	❌	✔
IPTC	✔	✔	❌	🟡 (If it's a part of IHDR)
ICC	✔	✔	✔	✔ (Node.js only, requires zlib)
Thumbnail	✔	❌	❌	❌
JFIF (JPEG header)	✔	⚫	⚫	⚫
IHDR (PNG header)	⚫	⚫	⚫	✔
Usage
file can be any binary format (Buffer, Uint8Array, Blob and more), <img> element, string path or url.

options specify what segments and blocks to parse, filters what tags to pick or skip.

API	Returns	Description
exifr.parse(file)	object	Parses IFD0, EXIF, GPS blocks
exifr.parse(file, true)	object	Parses everything
exifr.parse(file, ['Model', 'FNumber', ...])	object	Parses only specified tags
exifr.parse(file, {options})	object	Custom settings
exifr.gps(file)	{latitude, longitude}	Parses only GPS coords
exifr.orientation(file)	number	Parses only orientation
exifr.rotation(file)	object	Info how to rotate the photo
exifr.thumbnail(file)	Buffer|Uint8Array binary	Extracts embedded thumbnail
exifr.thumbnailUrl(file)	string Object URL	Browser only
exifr.sidecar(file)	object	Parses sidecar file
Installation
npm install exifr
Exifr comes in three prebuilt bundles. It's a good idea to start development with full and then scale down to lite, mini, or better yet, build your own around modular core.

// Modern Node.js can import CommonJS
import exifr from 'exifr' // => exifr/dist/full.umd.cjs
// Explicily import ES Module
import exifr from 'exifr/dist/full.esm.mjs' // to use ES Modules
// CommonJS, old Node.js
var exifr = require('exifr') // => exifr/dist/full.umd.cjs
<!-- ES Module in modern browsers -->
<script type="module">import exifr from 'node_modules/exifr/dist/lite.esm.js';</script>
<!-- classic UMD script -->
<script src="https://cdn.jsdelivr.net/npm/exifr/dist/lite.umd.js"></script>
<!-- IE10 & old browsers. You also need Promise polyfill -->
<script src="https://cdn.jsdelivr.net/npm/exifr/dist/lite.legacy.umd.js"></script>
Browsers: lite and mini are recommended because of balance between features and file size. UMD format attaches the library to global window.exifr object.

IE & old browsers: legacy builds come bundled with polyfills. Learn more.

Bundles & formats
full - Contains everything. Intended for use in Node.js.
lite - Reads JPEG and HEIC. Parses TIFF/EXIF and XMP.
mini - Stripped down to basics. Parses most useful TIFF/EXIF from JPEGs. Has no tag dictionaries.
Of course, you can use the full version in browser, or use any other build in Node.js.

ESM - Modern syntax for use in modern browsers and Node.js.
Uses import syntax.
UMD - Universal format for browsers and Node.js.
Supports CJS require('exifr'), AMD/RequireJS and global window.exifr.
legacy UMD - For use in older browsers (up to IE10).
Bundled with polyfills & shims, except for Promise polyfill. Learn more here.
Detailed comparison (click to expand)
ESM, .js .mjs .cjs extensions, "main", "module", "type":"module"
TL;DR: All bundles are available in two identical copies. .mjs and .js for ESM. .cjs and .js for UMD. Pick one that works with your tooling or webserver.

(click to expand for more info)
Named exports vs default export
Exifr exports both named exports and a default export - object containing all the named exports.

You can use import * as exifr from 'exifr' as well as import exifr from 'exifr' (recommended).

Examples
// exifr reads the file from disk, only a few hundred bytes.
exifr.parse('./myimage.jpg')
  .then(output => console.log('Camera:', output.Make, output.Model))
// Or read the file on your own and feed the buffer into exifr.
fs.readFile('./myimage.jpg')
  .then(exifr.parse)
  .then(output => console.log('Camera:', output.Make, output.Model))
Extract only certain tags

// only GPS
let {latitude, longitude} = await exifr.gps('./myimage.jpg')
// only orientation
let num = await exifr.orientation(blob)
// only three tags
let output = await exifr.parse(file, ['ISO', 'Orientation', 'LensModel'])
// only XMP segment (and disabled TIFF which is enabled by default)
let output = await exifr.parse(file, {tiff: false, xmp: true})
Extracting thumbnail

let thumbBuffer = await exifr.thumbnail(file)
// or get object URL (browser only)
img.src = await exifr.thumbnailUrl(file)
Web Worker

let worker = new Worker('./worker.js')
worker.postMessage('../test/IMG_20180725_163423.jpg')
worker.onmessage = e => console.log(e.data)
// tip: try Transferable Objects with ArrayBuffer
worker.postMessage(arrayBuffer, [arrayBuffer])
// worker.js
importScripts('./node_modules/exifr/dist/lite.umd.js')
self.onmessage = async e => postMessage(await exifr.parse(e.data))
UMD in Browser

<img src="./myimage.jpg">
<script src="./node_modules/exifr/dist/lite.umd.js"></script>
<script>
  let img = document.querySelector('img')
  window.exifr.parse(img).then(exif => console.log('Exposure:', exif.ExposureTime))
</script>
ESM in Browser

<input id="filepicker" type="file" multiple>
<script type="module">
  import exifr from './node_modules/exifr/dist/lite.esm.js'
  document.querySelector('#filepicker').addEventListener('change', async e => {
    let files = Array.from(e.target.files)
    let exifs = await Promise.all(files.map(exifr.parse))
    let dates = exifs.map(exif => exif.DateTimeOriginal.toGMTString())
    console.log(`${files.length} photos taken on:`, dates)
  })
</script>